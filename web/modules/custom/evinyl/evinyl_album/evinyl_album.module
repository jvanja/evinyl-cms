<?php

use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\user\Entity\User;
// use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;


/* ==========================================================================
  HOOKS
  ========================================================================== */

/**
 * Implements hook_entity_presave().
 */
function evinyl_album_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  // die;
  switch ($entity->bundle()) {

    case 'a_side_songs':
    case 'b_side_songs':
      // calculate_song_duration($entity);
      break;

    case 'podcast':
      calculate_podcast_duration($entity);
      break;

    case 'comment':
      sendNodeJsMessageToAll($entity);
      break;
  }
}

/**
 * Force sorting direction for search by date
 *
 */
// function evinyl_album_form_alter(&$form, &$form_state, $form_id) {
//   if (strstr($form_id, 'node_')) {
//     $form['actions']['submit']['#submit'][] = 'evinyl_album_node_form_submit';
//   }
// }
/**
 * Custom submit handler to redirect to the node edit page.
 */
// function evinyl_album_node_form_submit(array &$form, FormStateInterface $form_state) {
//   $node = $form_state->getFormObject()->getEntity();
//   $form_state->setRedirect('entity.node.edit_form', ['node' => $node->id()]);
// }

/**
 * Implements hook_entity_delete().
 */
function evinyl_album_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'album':
      // update_json_output();
      break;
  }
}

function evinyl_album_preprocess_node(&$variables) {
  $parameters = \Drupal::routeMatch()->getParameters()->all();

  if (isset($parameters['node'])) {
    // $node = Drupal::request()->attributes->get('node');
    $node = $parameters['node'];
    $id = $node->id();
    $url = Url::fromRoute('entity.node.edit_form', ['node' => $node->id()])->toString();
    // Redirecting to edit.
    $response = new RedirectResponse($url);
    $response->send();

  } elseif (isset($parameters['taxonomy_term'])) {

    $term = $parameters['taxonomy_term'];
    $id = $term->id();
    $url = Url::fromRoute('entity.taxonomy_term.edit_form', ['taxonomy_term' => $id])->toString();
    // Redirecting to edit.
    $response = new RedirectResponse($url);
    $response->send();
  }
}

/* ==========================================================================
  CUSTOM METHODS
  ========================================================================== */
function sendNodeJsMessageToAll($entity) {
  $channel = 'nodejs_ajax_broadcast';
  $uuid = $entity->uuid->getValue()[0]['value'];
  $uid = $entity->uid->getValue()[0]['target_id'];
  $timestamp = $entity->created->getValue()[0]['value'];
  $created = date('Y-m-d\TH:i:s', $timestamp);
  $subject = $entity->subject->getValue();
  $body = $entity->comment_body->getValue()[0]['value'];
  $user = User::load($uid);
  $userPhoto = File::load($user->user_picture->getValue()[0]['target_id']);
  $style = ImageStyle::load('thumbnail');
  $userPhotoUrl = '';

  if ($userPhoto) {
    $userPhotoUri = $userPhoto->getFileUri();
    $userPhotoUrl = $style->buildUrl($userPhotoUri);
  } else {
    $userPhotoUrl = 'https://lab.evinyl.net/sites/default/files/styles/thumbnail__100x100__cropped/public/default_images/default-user-image.png';
  }

  $message = (object) [
    'data' => (object) [
      'id' => $uuid,
      'uid' => $uid,
      'created' => $created,
      'subject' => '',
      'body' => $body,
      'user' => (object) [
        'name' => $user->name->getValue()[0]['value'],
        'id' => $user->uuid->getValue()[0]['value'],
        'field_is_artist' => (bool) $user->field_is_artist->getValue()[0]['value'],
        'field_user_photo' => $userPhotoUrl,
      ],
    ],
    'channel' => $channel,
  ];
  // var_dump($message);
  // die;
  nodejs_enqueue_message($message);
}

// function calculate_song_duration($entity) {
//   $getID3 = new getID3();
//   $file_id = $entity->field_song->getValue()[0]['target_id'];
//   $database = \Drupal::database();
//   $query = $database->query('SELECT field_media_audio_file_target_id FROM {media__field_media_audio_file} WHERE entity_id = :entity_id', [
//     ':entity_id' => $file_id,
//   ]);
//   $result = $query->fetchAll();
//   if (count($result) > 0) {
//     $final_file_id = $result[0]->field_media_audio_file_target_id;
//     $file = \Drupal\file\Entity\File::load($final_file_id);
//     $uri = $file->getFileUri();
//     $song_path = \Drupal::service('stream_wrapper_manager')->getViaUri($uri)->realpath();
//     $song_duration = round($getID3->analyze($song_path)['playtime_seconds']);
//     $entity->set('field_song_duration', $song_duration);
//   }
// }

function calculate_podcast_duration($entity) {

  require_once(__DIR__ . '/getid3/getid3.php');
  $getID3 = new getID3;

  $file_id = $entity->field_audio->getValue()[0]['target_id'];
  $file = \Drupal\file\Entity\File::load($file_id);
  $uri = $file->getFileUri();
  $song_path = \Drupal::service('stream_wrapper_manager')->getViaUri($uri)->realpath();

  $song_duration = round($getID3->analyze($song_path)['playtime_seconds']);
  $entity->set('field_audio_duration', $song_duration);
}

function update_json_output() {
  \Drupal::logger('evinyl_album')->notice('POST SAVE!!!');

  if ($_SERVER['SERVER_NAME'] === 'localhost') {
    $wget = '/usr/local/bin/wget --header="Accept: application/vnd.api+json"';
    $api = ' -O album.json "http://localhost/evinyl8/web/jsonapi/node/album';
  } else {
    $wget = '/usr/bin/wget --header="Accept: application/vnd.api+json"';
    $api = ' -O album.json "https://lab.evinyl.net/jsonapi/node/album';
  }
  $include = '?include=field_genre,field_artist_term,field_image&filter[status][value]=1"';
  $command = $wget . $api . $include;

  $result = exec($command . ' > /dev/null &', $response, $return_code);
  // \Drupal::logger('evinyl_album')->notice($command);
  // \Drupal::logger('evinyl_album')->notice('result was' . $wget);
  // \Drupal::logger('evinyl_album')->notice('response was' . $response);
  // \Drupal::logger('evinyl_album')->notice('return code' . $return_code);
}

/* ==========================================================================
  HELPER FUNCTIONS
  ========================================================================== */
/**
 * Returns seconds from MIN:SEC time format.
 *
 * @param $duration
 *   track duracion string
 */
function min_sec_to_sec($duration) {
  $time_array = explode(':', $duration);
  $minutes = $time_array[0];
  $seconds = $time_array[1];

  return $minutes * 60 + $seconds;
}

/**
 * Format a float duration into minutes:seconds.
 *
 * @param $variables
 *   Array with 'duration' key.
 */
function theme_getid3_duration($variables) {
  $duration = $variables['duration'];
  $seconds = round((($duration / 60) - floor($duration / 60)) * 60);
  $minutes = floor($duration / 60);

  if ($seconds >= 60) {
    $seconds -= 60;
    ++$minutes;
  }

  return ((int) $minutes) . ':' . str_pad($seconds, 2, 0, \STR_PAD_LEFT);
}

/**
 * Helper function for finding if node field has a value.
 */
function hasValue($fieldArray, $value) {
  $counter = 0;

  foreach ($fieldArray as $field) {
    if ($field['value'] === $value) {
      return [TRUE, $counter];
    }
    ++$counter;
  }

  if ($counter === 0) {
    return [FALSE, -1];
  }
}
