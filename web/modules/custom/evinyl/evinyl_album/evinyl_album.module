<?php

// use getID3;

/**
 * Implements hook_entity_presave().
 */
function evinyl_album_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if($entity->bundle() == 'a_side_songs' || $entity->bundle() == 'b_side_songs') {
    calculate_song_duration($entity);
  }
}

function calculate_song_duration($entity) {
  var_dump($entity);
  die;
// 		$file = file_load($entity->field_song['und'][0]['fid']);
// 		$fileinfo = getid3_analyze_file($file);
// 		$song_duration = round($fileinfo['playtime_seconds']);
// 		$entity->field_song_duration['und'][0]['value'] =  theme_getid3_duration(array( 'duration' => $song_duration));
}
/**
 * Implements hook_node_presave();
 *
 * @param \Drupal\node\NodeInterface $node
 */

function evinyl_album_node_presave(\Drupal\node\NodeInterface $node) {
  switch($node->bundle()) {
   case 'album':
    calculate_album_duration($node);
    break;
  }
}

function calculate_album_duration($node) {
  $getID3 = new getID3();
  $id3 = $getID3->version();

  $a_side_songs = $node->field_a_side_songs;
  $b_side_songs = $node->field_b_side_songs;
  $duration = 0;
  foreach ($a_side_songs as $index=>$song_field){
    $targetId = $song_field->get('target_id')->getValue();
    $p = \Drupal\paragraphs\Entity\Paragraph::load( $targetId );
    $file_id = $p->field_song->getValue()[0]['target_id'];
    $file = \Drupal\file\Entity\File::load($file_id);
    $uri = $file->getFileUri();
    $song_path = \Drupal::service('stream_wrapper_manager')->getViaUri($uri)->realpath();
    $song_duration = round($getID3->analyze($song_path)['playtime_seconds']);
    $duration += $song_duration;
  }
  foreach ($b_side_songs as $index=>$song_field){
    $targetId = $song_field->get('target_id')->getValue();
    $p = \Drupal\paragraphs\Entity\Paragraph::load( $targetId );
    $file_id = $p->field_song->getValue()[0]['target_id'];
    $file = \Drupal\file\Entity\File::load($file_id);
    $uri = $file->getFileUri();
    $song_path = \Drupal::service('stream_wrapper_manager')->getViaUri($uri)->realpath();
    $song_duration = round($getID3->analyze($song_path)['playtime_seconds']);
    $duration += $song_duration;
  }
  // dpm($node);
  $duration_min_sec_format = theme_getid3_duration(array( 'duration' => $duration ));
  $node->set('field_album_duration', $duration_min_sec_format);
  return $duration_min_sec_format;
}

/**
 * Returns seconds from MIN:SEC time format
 */
function min_sec_to_sec($duration) {
	$time_array = explode(':', $duration);
	$minutes = $time_array[0];
	$seconds = $time_array[1];
	$totalSeconds = $minutes * 60 + $seconds;
	return $totalSeconds;
}

/**
 * Format a float duration into minutes:seconds.
 *
 * @param $variables
 *   Array with 'duration' key.
 */
function theme_getid3_duration($variables) {
  $duration = $variables['duration'];
  $seconds = round((($duration / 60) - floor($duration / 60)) * 60);
  $minutes = floor($duration / 60);
  if ($seconds >= 60) {
    $seconds -= 60;
    $minutes++;
  }
  return ((int) $minutes) . ':' . str_pad($seconds, 2, 0, STR_PAD_LEFT);
}

// /**
//  * Implements hook_entity_presave().
//  */
// function evinyl_album_entity_presave($entity, $entity_type) {
// 	// dsm($entity_type);
// 	if ($entity_type == 'field_collection_item' && isset($entity->field_song['und'][0] )) {
// 		// dsm($entity);
// 		$file = file_load($entity->field_song['und'][0]['fid']);
// 		$fileinfo = getid3_analyze_file($file);
// 		$song_duration = round($fileinfo['playtime_seconds']);
// 		$entity->field_song_duration['und'][0]['value'] =  theme_getid3_duration(array( 'duration' => $song_duration));
// 	}
// }
//

// custom add to cart!
function custom_add_to_cart($product) {
  global $user;
  $uid = $user->uid;

  // Get the order to add line items to.
  $order = commerce_cart_order_load($uid);

  if (!$order) {
    $order = commerce_cart_order_new($uid);
  }

  // Add the product to the line item and create it.
  $line_item = commerce_product_line_item_new($product, $quantity = 1, $order->order_id, array(), $line_item_type = 'product');

  // Add the line item to the cart.
  if(commerce_cart_product_add($uid, $line_item)) {
    drupal_goto('cart');
  }
}


/**
 * Helper function for finding if node field has a value
 */
function hasValue($fieldArray, $value) {
  $counter = 0;
  foreach ($fieldArray as $field) {
    if ($field["value"] == $value) {
      return array(TRUE, $counter);
    }
    $counter ++;
  }
  if ($counter == 0) {
    return array(FALSE, -1);
  }
}

