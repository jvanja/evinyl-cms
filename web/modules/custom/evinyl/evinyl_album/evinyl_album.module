<?php

// use getID3;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

/* ==========================================================================
  HOOKS
  ========================================================================== */
/**
 * Implements hook_entity_presave().
 */
function evinyl_album_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  switch($entity->bundle()) {
   case 'album':
    // update_json_output();
    break;
   case 'a_side_songs':
   case 'b_side_songs':
    calculate_song_duration($entity);
    break;
   case 'comment':
    sendNodeJsMessageToAll($entity);
    break;
  }
}

/**
 * Implements hook_entity_delete().
 */
function evinyl_album_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  switch($entity->bundle()) {
   case 'album':
    // update_json_output();
    break;
  }
}
// /**
//  * Implements hook_entity_presave().
//  */
// function evinyl_album_entity_presave($entity, $entity_type) {
// 	// dsm($entity_type);
// 	if ($entity_type == 'field_collection_item' && isset($entity->field_song['und'][0] )) {
// 		// dsm($entity);
// 		$file = file_load($entity->field_song['und'][0]['fid']);
// 		$fileinfo = getid3_analyze_file($file);
// 		$song_duration = round($fileinfo['playtime_seconds']);
// 		$entity->field_song_duration['und'][0]['value'] =  theme_getid3_duration(array( 'duration' => $song_duration));
// 	}
// }



/* ==========================================================================
  CUSTOM METHODS
  ========================================================================== */
function sendNodeJsMessageToAll($entity) {

  $channel = 'nodejs_ajax_broadcast';
  $uuid = $entity->uuid->getValue()[0]['value'];
  $uid = $entity->uid->getValue()[0]['target_id'];
  $timestamp = $entity->created->getValue()[0]['value'];
  $created = date('Y-m-d\TH:i:s', $timestamp);
  $subject = $entity->subject->getValue();
  $body = $entity->comment_body->getValue()[0]['value'];
  $user = User::load($uid);
  $userPhoto = File::load($user->field_user_photo->getValue()[0]['target_id']);
  $userPhotoUri = $userPhoto->getFileUri();
  $style = ImageStyle::load('thumbnail');
  $userPhotoUrl = $style->buildUrl($userPhotoUri);

  $message = (object) array(
    'data' => (object) array(
      'id' => $uuid,
      'uid' => $uid,
      'created' => $created,
      'subject' => '',
      'body' => $body,
      'user' => (object) array(
        'name' => $user->name->getValue()[0]['value'],
        'id' => $user->uuid->getValue()[0]['value'],
        'field_is_artist' => (bool) $user->field_is_artist->getValue()[0]['value'],
        'field_user_photo' => $userPhotoUrl,
      )
    ),
    'channel' => $channel,
  );
  // var_dump($message);
  // die;
  nodejs_enqueue_message($message);
}

function calculate_song_duration($entity) {
  $getID3 = new getID3();
  $id3 = $getID3->version();
  $file_id = $entity->field_song->getValue()[0]['target_id'];
  $database = \Drupal::database();
  $query = $database->query("SELECT field_media_audio_file_target_id FROM {media__field_media_audio_file} WHERE entity_id = :entity_id", [
    ':entity_id' => $file_id
  ]);
  $result = $query->fetchAll();
  if (count($result) > 0) {
    $final_file_id = $result[0]->field_media_audio_file_target_id;
    $file = \Drupal\file\Entity\File::load($final_file_id);
    $uri = $file->getFileUri();
    $song_path = \Drupal::service('stream_wrapper_manager')->getViaUri($uri)->realpath();
    $song_duration = round($getID3->analyze($song_path)['playtime_seconds']);
    $entity->set('field_song_duration', $song_duration);
  }
}

function update_json_output () {
  \Drupal::logger('evinyl_album')->notice('POST SAVE!!!');

  if($_SERVER['SERVER_NAME'] == 'localhost') {
    $wget = '/usr/local/bin/wget --header="Accept: application/vnd.api+json"';
    $api = ' -O album.json "http://localhost/evinyl8/web/jsonapi/node/album';
  } else {
    $wget = '/usr/bin/wget --header="Accept: application/vnd.api+json"';
    $api = ' -O album.json "https://lab.evinyl.net/jsonapi/node/album';
  }
  $include = '?include=field_genre,field_artist_term,field_image&filter[status][value]=1"';
  $command = $wget . $api . $include;

  $result = exec($command . ' > /dev/null &', $response, $return_code);
  // \Drupal::logger('evinyl_album')->notice($command);
  // \Drupal::logger('evinyl_album')->notice('result was' . $wget);
  // \Drupal::logger('evinyl_album')->notice('response was' . $response);
  // \Drupal::logger('evinyl_album')->notice('return code' . $return_code);
}

// custom add to cart!
function custom_add_to_cart($product) {
  global $user;
  $uid = $user->uid;

  // Get the order to add line items to.
  $order = commerce_cart_order_load($uid);

  if (!$order) {
    $order = commerce_cart_order_new($uid);
  }

  // Add the product to the line item and create it.
  $line_item = commerce_product_line_item_new($product, $quantity = 1, $order->order_id, array(), $line_item_type = 'product');

  // Add the line item to the cart.
  if(commerce_cart_product_add($uid, $line_item)) {
    drupal_goto('cart');
  }
}




/* ==========================================================================
  HELPER FUNCTIONS
  ========================================================================== */
/**
 * Returns seconds from MIN:SEC time format
 * @param $duration
 *   track duracion string
 */
function min_sec_to_sec($duration) {
	$time_array = explode(':', $duration);
	$minutes = $time_array[0];
	$seconds = $time_array[1];
	$totalSeconds = $minutes * 60 + $seconds;
	return $totalSeconds;
}

/**
 * Format a float duration into minutes:seconds.
 *
 * @param $variables
 *   Array with 'duration' key.
 */
function theme_getid3_duration($variables) {
  $duration = $variables['duration'];
  $seconds = round((($duration / 60) - floor($duration / 60)) * 60);
  $minutes = floor($duration / 60);
  if ($seconds >= 60) {
    $seconds -= 60;
    $minutes++;
  }
  return ((int) $minutes) . ':' . str_pad($seconds, 2, 0, STR_PAD_LEFT);
}

/**
 * Helper function for finding if node field has a value
 */
function hasValue($fieldArray, $value) {
  $counter = 0;
  foreach ($fieldArray as $field) {
    if ($field["value"] == $value) {
      return array(TRUE, $counter);
    }
    $counter ++;
  }
  if ($counter == 0) {
    return array(FALSE, -1);
  }
}

